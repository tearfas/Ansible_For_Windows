- name:  Windows Update
  hosts: all
  gather_facts: false
  tasks:
    - name: Check for missing updates
      win_updates:
        state: searched
      register: update_results

    - debug:
        var: update_results

    - name: report update results
      debug:
        msg: |
          {% for k in update_results.updates %}
          {{ k.title }}
          {% endfor %}

###    - name: check free disk space
#      win_shell: 'write-host ([math]::Round((Get-PSDrive C | Select-Object Free).free / 1024 / 1024 / 1024,2))'
#      register: freespace
#
#    - name: report free disk space
#      debug:
#        msg: |
#          "{{ freespace.stdout }} GB"
#
#    - name: fail if there is not enough space
#      fail:
#        msg: "VM {{inventory_hostname}} has not enough space"
#      when: "{{freespace.stdout | int < 20}}"
#
#    - name: Running Windows Update
#      win_updates:
#          category_names: ['SecurityUpdates','CriticalUpdates','UpdateRollups', 'Updates', 'DefinitionUpdates']
#      register: result
#
#    # output results
#    - debug: var=result
#    
#    # reboot only if required
#
#    - name: Reboot
#      win_reboot:
#      when: result.reboot_required
#     
#
#    
#
#
#
#
#    - name: Install all updates and reboot as many times as needed
#  ansible.windows.win_updates:
#    category_names: '*'
#    reboot: true
#
#- name: Set a server alive interval during update stage for the ssh connection plugin
#  ansible.windows.win_updates:
#    category_names: '*'
#    reboot: true
#  vars:
#    # This can be set in a few ways, see the ssh connection plugin for more
#    # information. ControlMaster should be disabled to ensure the new timeout
#    # value is applied for this connection instead of through the cached
#    # connection.
#    ansible_ssh_args: -o ControlMaster=no -o ServerAliveInterval=30
#
#- name: Install all security, critical, and rollup updates without a scheduled task
#  ansible.windows.win_updates:
#    category_names:
#      - SecurityUpdates
#      - CriticalUpdates
#      - UpdateRollups
#  become: true
#  become_method: runas
#  become_user: SYSTEM
#
#- name: Search-only, return list of found updates (if any), log to C:\ansible_wu.txt
#  ansible.windows.win_updates:
#    category_names: SecurityUpdates
#    state: searched
#    log_path: C:\ansible_wu.txt
#
#- name: Install all security updates with automatic reboots
#  ansible.windows.win_updates:
#    category_names:
#    - SecurityUpdates
#    reboot: true
#
#- name: Install only particular updates based on the KB numbers
#  ansible.windows.win_updates:
#    category_names:
#    - SecurityUpdates
#    accept_list:
#    - KB4056892
#    - KB4073117
#
#- name: Exclude updates based on the update title
#  ansible.windows.win_updates:
#    category_names:
#    - SecurityUpdates
#    - CriticalUpdates
#    reject_list:
#    - Windows Malicious Software Removal Tool for Windows
#    - \d{4}-\d{2} Cumulative Update for Windows Server 2016
#
## Optionally, you can increase the reboot_timeout to survive long updates during reboot
#- name: Ensure we wait long enough for the updates to be applied during reboot
#  ansible.windows.win_updates:
#    reboot: true
#    reboot_timeout: 3600
#
## Search and download Windows updates
#- name: Search and download Windows updates without installing them
#  ansible.windows.win_updates:
#    state: downloaded
#
#
#    ########################
# ---
- hosts: all
  any_errors_fatal: false
  serial:
   - 1
   - 5%
   - 25%
  max_fail_percentage: 10%
  vars:
    win_updates_categories:
      - CriticalUpdates
      - SecurityUpdates
  tasks:
  # Check if there are missing updates
  - name: Check for missing updates.
    win_updates:
      state: searched
      category_names: "{{ win_updates_categories }}"
    register: update_count
    ignore_errors: yes

  - name: Reboot if needed
    win_shell: Restart-Computer -Force
    when: update_count.reboot_required
    ignore_errors: yes

  - name: Install missing updates.
    win_updates:
      category_names: "{{ win_updates_categories }}"
    register: update_result

  - name: Reboot if needed
    win_shell: Restart-Computer -Force
    when: update_result.reboot_required
    ignore_errors: yes
